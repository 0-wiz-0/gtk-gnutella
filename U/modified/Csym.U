?X:
?X: Changed the test program, since the old form no longer worked with gcc3.
?X:		--RAM, 10/08/2003
?X:
?RCS: $Id$
?RCS:
?RCS: @COPYRIGHT@
?RCS:
?MAKE:Csym: Options contains libc libs runnm +cc +ccflags +ldflags rm
?MAKE:	-pick add $@ %<
?LINT:define csym
?LINT:use libc
?S:csym:
?S:	This shell variable is used internally by Configure to check
?S:	wether a given C symbol is defined or not. A typical use is:
?S:		set symbol result [-fva] [previous]
?S:		eval $csym
?S:	That will set result to 'true' if the function [-f], variable [-v]
?S:	or array [-a] is defined, 'false' otherwise. If a previous value is
?S:	given and the -r flag was provided on the command line, that value
?S:	is reused without questioning.
?S:.
?V:csym
?T:tval tx tlook tf tdc tc
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
?X:
?X: We use 'char' instead of 'int' to try to circumvent overzealous
?X: optimizing compilers using built-in prototypes for commonly used
?X: routines to complain when seeing a different external declaration. For
?X: instance, gcc 2.6.3 fails if we use 'int' and we attempt a test against
?X: memcpy() on machines where sizeof(int) == sizeof(char *) (the usual return
?X: type), the compiler assuming it's a built-in declaration given that the
?X: returned size matches. At least with 'char' we are safe! -- RAM, for ADO
?X:
?X: Let's thank GNU cc for making our lifes so easy! :-)
?X: (An alternative for the future would be to use our knowledge about gcc
?X: to force a -fno-builtin option in the compile test, in case the 'char'
?X: trick is obsoleted by future gcc releases). -- RAM
?X:
		echo "extern char $1$tdc; int main() { $1$tc; return 0; }" > t.c;
		if $cc $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'

