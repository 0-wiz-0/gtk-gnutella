dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gtk-gnutella, 0.92.1c)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_PROG_YACC
AC_C_INLINE
AC_C_CONST

ALL_LINGUAS="es fr nl"
AM_GNU_GETTEXT([external])

dnl ---------------------------------------------------------------------------
dnl Check configure command line options
dnl ---------------------------------------------------------------------------

AC_ARG_ENABLE(xml-store,[
  --enable-xml-store              save searches and filters in XML (default=on)], , 
  enable_xml_store=yes)
AC_ARG_ENABLE(remote-shell,[
  --enable-remote-shell           provide a shell on the gnutella port (default=off)], , 
  enable_remote_shell=no)
AC_ARG_ENABLE(gtk2,[
  --enable-gtk2                   build a gtk2 version (default=off)], , 
  enable_gtk2=no)
AC_ARG_ENABLE(tos,[
  --enable-tos                    use IP Type of Service (default=on)], ,
	enable_tos=yes)


if  test "x$enable_gtk2" = "xno"
then
    AM_PATH_GTK(1.2.0, ,
	AC_MSG_ERROR(Cannot find GTK: Is gtk-config in path?))

    AM_PATH_GLIB(1.2.10, ,
			AC_MSG_ERROR(Cannot find GLib: Is glib-config in path?))
    frontend="Gtk 1.2"
else
    PKG_CHECK_MODULES(GTK_GNUTELLA, gtk+-2.0 >= 2.0.0 glib-2.0 >= 2.0.0)
    AC_SUBST(GTK_GNUTELLA_CFLAGS)
    AC_DEFINE(USE_GTK2, 1, [Define if you want to use GTK+ 2.x.])

    frontend="Gtk 2.0"

dnl We don't need any deprecated glib functions 
	CPPFLAGS="${CPPFLAGS} -DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED"
    
fi
AM_CONDITIONAL(ENABLE_GTK2, test "x$enable_gtk2" = "xyes")


dnl Check whether libresolv is needed for inet_aton()
need_lresolv=yes
AC_MSG_CHECKING(whether inet_aton needs libresolv)
AC_TRY_LINK_FUNC(inet_aton, need_lresolv=no, LIBS="$LIBS -lresolv")
AC_MSG_RESULT($need_lresolv)

# Checks for libsocket and libnsl needed by Solaris
AC_SEARCH_LIBS(socket,socket)                                               
AC_SEARCH_LIBS(gethostbyname,nsl socket)                                    

dnl Set PACKAGE_DATA_DIR and LOCALEDIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
	"${ac_default_prefix}/share/${PACKAGE}",
	[Define which directory should be used for package data.])
    AC_DEFINE_UNQUOTED(LOCALEDIR,
	"${ac_default_prefix}/share/locale",
	[Define where the files for NLS should be installed.])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
	"${prefix}/share/${PACKAGE}",
	[Define which directory should be used for package data.])
    AC_DEFINE_UNQUOTED(LOCALEDIR,
	"${prefix}/share/locale",
	[Define where the files for NLS should be installed.])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
	"${datadir}/${PACKAGE}",
	[Define which directory should be used for package data.])
  AC_DEFINE_UNQUOTED(LOCALEDIR,
	"${datadir}/locale",
	[Define where the files for NLS should be installed.])
fi



dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR,
	"${packagesrcdir}",
	[Define which directory should be used for package source.])

dnl Check for XML support
AC_PATH_PROG(XML_CONFIG,xml2-config,no)
if test "x$XML_CONFIG" != "xno"; then
    AC_MSG_CHECKING([whether to enable XML persistance backend])
    if test "x$enable_xml_store" = "xno"
    then
    	AC_MSG_RESULT([no])
    else
        AC_MSG_RESULT([yes])
        AC_MSG_CHECKING(libxml2 version)
        libxml2_version=`$XML_CONFIG --version | awk '{print $1;}'`
        AC_MSG_RESULT($libxml2_version)
        libxml2_version=`echo $libxml2_version | awk -F. '{print $1 * 10000 + $2 * 100 + $3;}'`
        if test 0$libxml2_version -lt 20419; then
            AC_MSG_ERROR(libxml2 2.4.19 or later required)
        fi
        XML_LIBS=`$XML_CONFIG --libs`
        XML_CFLAGS=`$XML_CONFIG --cflags`
        AC_SUBST(XML_LIBS)
        AC_SUBST(XML_CFLAGS)
        LIBXML2_REQUIRED=2.4.19
        AC_SUBST(LIBXML2_REQUIRED)
        AC_DEFINE(USE_SEARCH_XML, 1, [Define if you want to use libxml2.])
    fi
else
    AC_MSG_CHECKING([whether to enable XML persistance backend])
   	AC_MSG_RESULT([no])
    enable_xml_store="no"
fi
AM_CONDITIONAL(ENABLE_XML_STORE, test "x$enable_xml_store" = "xyes")

dnl Check for remote shell support
msg="Remote shell             :  "
if test "x$enable_remote_shell" = "xyes" ; then
    AC_DEFINE(USE_REMOTE_SHELL, 
		1,
		[Define if you want to use the remote shell feature.])
fi
AM_CONDITIONAL(ENABLE_REMOTE_SHELL, test "x$enable_remote_shell" = "xyes")


dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_CHECK_FUNCS(hstrerror herror inet_aton)
AC_CHECK_FUNCS(strcasestr vsnprintf strlcpy)
AC_CHECK_FUNCS(srandom random)
AC_CHECK_FUNCS(sysctl)

AC_CHECK_FUNC(bind_textdomain_codeset, ,
    AC_CHECK_LIB(intl, bind_textdomain_codeset,
    [LIBS="-lintl $LIBS"
     ac_cv_func_bind_textdomain_codeset="yes"
    ]))
if test "$ac_cv_func_bind_textdomain_codeset" = yes; then
    AC_DEFINE(HAVE_BIND_TEXTDOMAIN_CODESET, 1,
    [Define if you have the bind_textdomain_codeset function.])
fi

AC_CHECK_HEADERS(libcharset.h, , , ) 

AC_CHECK_HEADERS(sys/sysctl.h, , , )

dnl Checks for sendfile(2)
AC_CHECK_FUNC(sendfile, , AC_CHECK_LIB(sendfile, sendfile,
        [LIBS="-lsendfile $LIBS"]))
dnl Autoconf is messy, or I don't understand it
if test "$ac_cv_func_sendfile" = yes; then
    AC_DEFINE(HAVE_SENDFILE, 1, [Define if you have the sendfile function.])
fi

dnl Checks for sys/sendfile.h
AC_CHECK_HEADER(sys/sendfile.h,
	[have_sys_sendfile_h=yes], [have_sys_sendfile_h=no])
if test "$have_sys_sendfile_h" = yes; then
    AC_DEFINE(HAVE_SYS_SENDFILE_H, 1, [Define if you have sys/sendfile.h.])
fi

dnl Checks for ctype.h
AC_CHECK_HEADER(ctype.h, [have_ctype_h=yes], [have_ctype_h=no])
if test "$have_ctype_h" = yes; then
    AC_DEFINE(HAVE_CTYPE_H, 1, [Define if you have ctype.h.])
fi

dnl Checks for zlib.h

AC_CHECK_HEADER(zlib.h,
	AC_CHECK_LIB(z, deflate, [have_zlib=yes], [have_zlib=no]))

if test "x$have_zlib" != "xyes"; then
    echo "Missing zlib -- you need to install zlib from www.zlib.org"
fi

dnl Checks for IP_TOS in netinet/ip.h
if test "x$enable_tos" != "xno"; then
    AC_MSG_CHECKING([for IP TOS support in netinet/in.h])
    AC_EGREP_CPP(wehavetos, [
     #include <sys/socket.h>
     #include <netinet/in.h>
     #if defined(IP_TOS) && defined(IPTOS_LOWDELAY) && defined(IPTOS_THROUGHPUT)
       wehavetos
     #endif
    ], have_tos=yes, have_tos=no)
    if test "x$have_tos" = "xyes"; then
        AC_MSG_RESULT([yes])
        AC_DEFINE(HAVE_IP_TOS,
			1,
			[Define if your IP stack supports Type-of-Service (IP TOS).])
    else
        AC_MSG_RESULT([no])
        AC_MSG_CHECKING([for IP TOS support in netinet/ip.h])
        AC_EGREP_CPP(wehavetos, [
	  #include <sys/socket.h>
	  #include <netinet/in.h>
	  #include <netinet/ip.h>
	  #if defined(IP_TOS) && defined(IPTOS_LOWDELAY) && defined(IPTOS_THROUGHPUT)
	    wehavetos
	  #endif
	], have_tos=yes, have_tos=no)
	if test "x$have_tos" = "xyes"; then
	    AC_MSG_RESULT([yes])
	    AC_DEFINE(HAVE_IP_TOS,
			1,
			[Define if your IP stack supports Type-of-Service (IP TOS).])
	    AC_DEFINE(NEED_NETINET_IP_H_FOR_TOS,
			1,
			[Define if you need netinet/ip.h for TOS.])
	else
	    AC_MSG_RESULT([no])
            echo "TOS constants not defined in <sys/socket.h> or <netinet/in.h>."
            echo "TOS may not be available on your platform."
        fi
    fi
else
    AC_MSG_CHECKING([for IP TOS support])
    AC_MSG_RESULT([disabled])
    have_tos=no
fi

AC_OUTPUT([ po/Makefile.in m4/Makefile 
Makefile
src/Makefile
gtk-gnutella.spec
])

echo
echo
echo "Feature summary:"
echo "---------------"
echo
echo "Frontend                 :   $frontend"
msg="Persistant filters       :  "
if test "x$enable_xml_store" = "xno" ; then
    if test "x$XML_CONFIG" = "xno" ; then
        echo "$msg no (libxml2 missing)"
	echo "NOTE: filters will not be persisted. You should seriously consider"
	echo "      installing libxml2 as the filters are a central element of"
	echo "      gtk-gnutella and you WILL want that they are kept across"
	echo "      sessions. If your distribution does not have a libxml2"
	echo "      development package, you can get the sources here:"
	echo "      http://www.libxml.org"
    else
	echo "$msg no (you must know)"
    fi
else
    echo "$msg yes"
fi	

msg="Remote shell             :  "
if test "x$enable_remote_shell" = "xyes" ; then
    echo "$msg yes"
else
    echo "$msg no"
fi

msg="gNet traffic compression :  "
if test "x$have_zlib" = "xyes" ; then
    echo "$msg yes"
else
    echo "$msg no (you need to install zlib from www.zlib.org)"
fi

msg="IP TOS (Type of Service) :  "
if test "x$have_tos" = "xyes" ; then
    echo "$msg yes"
else
    if test "x$enable_tos" = "xyes" ; then
        echo "$msg no (missing declarations in header file)"
    else
	echo "$msg no (disabled)"
    fi
fi

echo
echo "It's recommended and probably necessary to use GNU make. If GNU make"
echo "is not the default on your system, it might be installed as gmake."
echo
