The 'LF' GGEP Extension
==========================

Name: LF (Large File)
Where: Query Hit
Status: Draft 
Date: 2004-11-04
Format: Variable-Length Integer 
COBS-Encoding: No
Deflate: No

1. OVERVIEW

Due to the wide use of broadband internet connections and increasing amount of
huge content, the transfer of files larger than 4 GiB is no longer utopic. The
standard Gnutella protocol is limited to 32-bit integers to express filesizes.
This limit can easily be removed by a GGEP extension.

2. USAGE

In general, the value of the LF extension overrides the value in the legacy
filesize field of the query hit. The extension should only be used if
necessary. To prevent problems with older clients, using the extension should
be considered if the filesize exceeds 2^31-1 bytes. If the LF extension is
used, the legacy filesize should be set to ~0 i.e., all bits set. This may be
used to detect clients that are not aware of this extension and assume a
different filesize. In order to take advantage of this, all related routines
(e.g., HTTP parsers) must be able to parse and emit at least 64-bit values and
detect too large values that cannot be handled by them.

3. SPECIFICATION

There is no need to indicate support for this feature at any stage. This
extension is defined as follows:

Due to the location of the LF extension, there must be no NUL bytes in the
the GGEP data. Therefore, each byte of the data contains only 7 data bits,
the MSB is set in all bytes. The ordering of the bytes is little-endian.

4. EXAMPLE CODE

This example implementation in C use 64-bit integers, allowing filesizes up to
(2 ^ 63) - 1 bytes. The maximum length for the GGEP data is therefore 9 bytes.
The decoder is strict i.e., trailing zeros are disallowed and the MSB must be
set even if the data value is not zero. On failure, both function return -1.

int64_t
decode_lf(uint8_t *data, int length)
{
  uint64_t filesize, b;
  int i, j;

  if (length < 1 || length > 9)
    return -1;

  filesize = 0;
  j = 0;
  for (i = 0; i < length; i++, j += 7) {
    b = data[i];
    if ((b ^= 0x80) & 0x80)
      return -1;
    
    filesize |= b << j;
  }

  if (0 == b && length != 1)
    return -1;

  return filesize;
}

int
encode_lf(int64_t filesize, uint8_t *data)
{
  uint64_t s = filesize;
  uint8_t *p = data;

  if (filesize < 0)
    return -1;
  
  do {
    *p++ = s | 0x80;
  } while (0 != (s >>= 7));

  return p - data;
}


